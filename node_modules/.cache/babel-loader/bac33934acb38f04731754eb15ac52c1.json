{"ast":null,"code":"var _jsxFileName = \"D:\\\\HTML\\\\REACT JS\\\\complete one\\\\React-iNoteBook-master\\\\frontend\\\\src\\\\Context\\\\Note\\\\NoteState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport useRequest from \"../../Hooks/Request\";\nimport NoteContext from \"./NoteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const HOST = \"http://localhost:5000/api/notes\";\n  const AUTH_TOKEN = JSON.parse(localStorage.getItem(\"token\"));\n  const [notes, setNotes] = useState([]);\n  const history = useHistory();\n  const checkRequest = useRequest(); // Fetching Notes\n\n  const fetchNotes = async () => {\n    if (AUTH_TOKEN) {\n      const response = await fetch(HOST, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": AUTH_TOKEN\n        }\n      });\n      const json = await response.json();\n      setNotes(json);\n    } else {\n      history.push(\"/login\");\n    }\n  }; // Adding New Note\n\n\n  const addNote = async ({\n    title,\n    description,\n    tag\n  }) => {\n    const response = await fetch(HOST, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": AUTH_TOKEN\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n    checkRequest(response.status, json.error, \"Note Added Successfully\", () => setNotes(notes.concat(json)));\n  }; // Updating a Note\n\n\n  const editNote = async (id, updated) => {\n    const response = await fetch(HOST + \"/\" + id, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": AUTH_TOKEN\n      },\n      body: JSON.stringify(updated)\n    });\n    const json = await response.json();\n    checkRequest(response.status, json.error, \"Note Updated Successfully\", () => setNotes(json.notes));\n  }; // Deleting a Note\n\n\n  const dltNote = async id => {\n    const response = await fetch(HOST + \"/\" + id, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": AUTH_TOKEN\n      }\n    });\n    const json = await response.json();\n    checkRequest(response.status, json.error, \"Note Deleted Successfully\", () => setNotes(json.notes));\n  }; // Deleting All Notes\n\n\n  const dltAll = async () => {\n    const response = await fetch(HOST + \"/dltAll\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": AUTH_TOKEN\n      }\n    });\n    const json = await response.json();\n    checkRequest(response.status, json.error, \"All Notes Deleted\", () => setNotes(json.notes));\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      fetchNotes,\n      addNote,\n      editNote,\n      dltNote,\n      dltAll\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NoteState, \"ziCPId0rH6wxwXhJPQrs/6de36w=\", false, function () {\n  return [useHistory, useRequest];\n});\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["D:/HTML/REACT JS/complete one/React-iNoteBook-master/frontend/src/Context/Note/NoteState.js"],"names":["React","useState","useHistory","useRequest","NoteContext","NoteState","props","HOST","AUTH_TOKEN","JSON","parse","localStorage","getItem","notes","setNotes","history","checkRequest","fetchNotes","response","fetch","method","headers","json","push","addNote","title","description","tag","body","stringify","status","error","concat","editNote","id","updated","dltNote","dltAll","children"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport useRequest from \"../../Hooks/Request\";\nimport NoteContext from \"./NoteContext\";\n\nconst NoteState = (props) => {\n  const HOST = \"http://localhost:5000/api/notes\";\n  const AUTH_TOKEN = JSON.parse(localStorage.getItem(\"token\"));\n\n  const [notes, setNotes] = useState([]);\n  const history = useHistory();\n\n  const checkRequest = useRequest();\n\n  // Fetching Notes\n  const fetchNotes = async () => {\n    if (AUTH_TOKEN) {\n      const response = await fetch(HOST, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": AUTH_TOKEN,\n        },\n      });\n      const json = await response.json();\n      setNotes(json);\n    } else {\n      history.push(\"/login\");\n    }\n  };\n\n  // Adding New Note\n  const addNote = async ({ title, description, tag }) => {\n    const response = await fetch(HOST, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": AUTH_TOKEN,\n      },\n      body: JSON.stringify({ title, description, tag }),\n    });\n    const json = await response.json();\n    checkRequest(response.status, json.error, \"Note Added Successfully\", () =>\n      setNotes(notes.concat(json))\n    );\n  };\n\n  // Updating a Note\n  const editNote = async (id, updated) => {\n    const response = await fetch(HOST + \"/\" + id, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": AUTH_TOKEN,\n      },\n      body: JSON.stringify(updated),\n    });\n    const json = await response.json();\n    checkRequest(response.status, json.error, \"Note Updated Successfully\", () =>\n      setNotes(json.notes)\n    );\n  };\n\n  // Deleting a Note\n  const dltNote = async (id) => {\n    const response = await fetch(HOST + \"/\" + id, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": AUTH_TOKEN,\n      },\n    });\n    const json = await response.json();\n    checkRequest(response.status, json.error, \"Note Deleted Successfully\", () =>\n      setNotes(json.notes)\n    );\n  };\n\n  // Deleting All Notes\n  const dltAll = async () => {\n    const response = await fetch(HOST + \"/dltAll\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": AUTH_TOKEN,\n      },\n    });\n    const json = await response.json();\n    checkRequest(response.status, json.error, \"All Notes Deleted\", () =>\n      setNotes(json.notes)\n    );\n  };\n\n  return (\n    <NoteContext.Provider\n      value={{ notes, fetchNotes, addNote, editNote, dltNote, dltAll }}\n    >\n      {props.children}\n    </NoteContext.Provider>\n  );\n};\n\nexport default NoteState;\n"]},"metadata":{},"sourceType":"module"}